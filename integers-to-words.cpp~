 #include <iostream>
#include <vector>
#include <string>
#include <stdexcept>
#include <algorithm>

bool handled = false;
std::string convert_tens(int i)
{
  switch(i)
    {
    case 0:
      return "ten";
      break;
    case 1:
      return "eleven";
      break;
    case 2:
      return "twelve";
      break;
    case 3:
      return "thirteen";
      break;
    case 4:
      return "fourteen";
      break;
    case 5:
      return "fifteen";
      break;
    case 6:
      return "sixteen";
      break;
    case 7:
      return "seventeen";
      break;
    case 8:
      return "eighteen";
      break;
    case 9:
      return "nineteen";
      break;
    default:
      throw std::runtime_error("unrecognized number");
    }
}

std::string convert_units(int i)
{
  switch(i)
    {
    case 0:
      return "";
      break;
    case 1:
      return "one";
      break;
    case 2:
      return "two";
      break;
    case 3:
      return "three";
      break;
    case 4:
      return "four";
      break;
    case 5:
      return "five";
      break;
    case 6:
      return "six";
      break;
    case 7:
      return "seven";
      break;
    case 8:
      return "eight";
      break;
    case 9:
      return "nine";
      break;
    default:
      throw std::runtime_error("unrecognized number");
    }
}

std::string handle_tens(int ten_value, int unit_value)
{
   switch(ten_value)
     {
     case 0:
       return "";
     case 1:
       handled = true;
       return convert_tens(unit_value);
       break;
     case 2:
       return " twenty ";
       break;
     case 3:
       return " thirty ";
       break;
     case 4:
       return " forty ";
       break;
     case 5: 
       return " fity ";
       break;
     case 6:
       return " sixty ";
       break;
     case 7:
       return " seventy ";
       break;
     case 8: 
       return " eighty ";
       break;
     case 9:
       return " ninety ";
       break;
     default:
       throw std::runtime_error("unrecognized number");
    }
}


void converter(const std::vector<int>& numbers,int position)
{
  int value = numbers[position];
  int next = 0;
  if(position !=0)
    {
      next =  numbers[position-1];
    }
  //std::cout << "position: " << position << " value: " << value << " next: " << next << '\n';
  switch(position)
    {
    case 6:
      std::cout << convert_units(value)
		<< " millions";
      break;
    case 5:
      std::cout << convert_units(value)
		<< " hundred";
      std::cout << handle_tens(value,next);
      std::cout << convert_units(next)
		<< " thousand";
      break;
    case 4:
      std::cout << handle_tens(value,next);
      std::cout << convert_units(next)
		<< " thousand";
      break;
    case 3:
      std::cout << convert_units(value)
		<< " thousand";
      break;
    case 2:
      std::cout << convert_units(value)
		<< " hundred";
      break;
    case 1:
      std::cout << handle_tens(value,next);
      break;
    case 0:
      if(!handled)
	{
	  std::cout << convert_units(value);
	  handled = false;
	}
      break;
    default:
      throw std::runtime_error("unrecognized number in converter");
      break;
    }
  
  std::cout << "\n";
}

void parse(std::vector<int>& numbers)
{
  for(int i = (int)numbers.size()-1; i >= 0; --i)
    {
      if(!numbers[i] == 0)
	{
	  converter(numbers,i);
	}
    }
}


void take_input(std::vector<int>& numbers, int size)
{
  char c;  
  for(int i = 0; i < size; ++i)
    {
      std::cin >> c;
      std::cout << c-'0' << "\n";
      numbers.push_back(c-'0');
    }
  std::reverse(numbers.begin(),numbers.end());
}

int main()
{
  try
    {
      std::vector<int> numbers;
      int size_of_input;
      std::cin >> size_of_input;
      take_input(numbers,size_of_input);
      parse(numbers);
    }
  catch(std::runtime_error& e)
    {
      std::cerr << "runtime error: " << e.what() << '\n';
      return -1;
    }
}
